FinalProject
library(rmarkdown)
library(caret)
library(dplyr)

Load data
train = read.csv("pml-training.csv")
test = read.csv("pml-testing.csv")
Subsetting data for rmarkdown
library(caTools)
## Warning: package 'caTools' was built under R version 3.1.3
split = sample.split(train$classe, SplitRatio = 0.10)
train = subset(train, split == TRUE)
Dealing with NA and missing data. Convert blank and DIV/0 to NA.
Remove variables with NA data
training <- train
training[training == ""] <- NA
training[training == "#DIV/0!"] <- NA

hasMissing <- unlist(lapply(training, function(x) any(is.na(x))))
hasMissing <- names(hasMissing)[hasMissing]
hasMissing
##   [1] "kurtosis_roll_belt"       "kurtosis_picth_belt"     
##   [3] "kurtosis_yaw_belt"        "skewness_roll_belt"      
##   [5] "skewness_roll_belt.1"     "skewness_yaw_belt"       
##   [7] "max_roll_belt"            "max_picth_belt"          
##   [9] "max_yaw_belt"             "min_roll_belt"           
##  [11] "min_pitch_belt"           "min_yaw_belt"            
##  [13] "amplitude_roll_belt"      "amplitude_pitch_belt"    
##  [15] "amplitude_yaw_belt"       "var_total_accel_belt"    
##  [17] "avg_roll_belt"            "stddev_roll_belt"        
##  [19] "var_roll_belt"            "avg_pitch_belt"          
##  [21] "stddev_pitch_belt"        "var_pitch_belt"          
##  [23] "avg_yaw_belt"             "stddev_yaw_belt"         
##  [25] "var_yaw_belt"             "var_accel_arm"           
##  [27] "avg_roll_arm"             "stddev_roll_arm"         
##  [29] "var_roll_arm"             "avg_pitch_arm"           
##  [31] "stddev_pitch_arm"         "var_pitch_arm"           
##  [33] "avg_yaw_arm"              "stddev_yaw_arm"          
##  [35] "var_yaw_arm"              "kurtosis_roll_arm"       
##  [37] "kurtosis_picth_arm"       "kurtosis_yaw_arm"        
##  [39] "skewness_roll_arm"        "skewness_pitch_arm"      
##  [41] "skewness_yaw_arm"         "max_roll_arm"            
##  [43] "max_picth_arm"            "max_yaw_arm"             
##  [45] "min_roll_arm"             "min_pitch_arm"           
##  [47] "min_yaw_arm"              "amplitude_roll_arm"      
##  [49] "amplitude_pitch_arm"      "amplitude_yaw_arm"       
##  [51] "kurtosis_roll_dumbbell"   "kurtosis_picth_dumbbell" 
##  [53] "kurtosis_yaw_dumbbell"    "skewness_roll_dumbbell"  
##  [55] "skewness_pitch_dumbbell"  "skewness_yaw_dumbbell"   
##  [57] "max_roll_dumbbell"        "max_picth_dumbbell"      
##  [59] "max_yaw_dumbbell"         "min_roll_dumbbell"       
##  [61] "min_pitch_dumbbell"       "min_yaw_dumbbell"        
##  [63] "amplitude_roll_dumbbell"  "amplitude_pitch_dumbbell"
##  [65] "amplitude_yaw_dumbbell"   "var_accel_dumbbell"      
##  [67] "avg_roll_dumbbell"        "stddev_roll_dumbbell"    
##  [69] "var_roll_dumbbell"        "avg_pitch_dumbbell"      
##  [71] "stddev_pitch_dumbbell"    "var_pitch_dumbbell"      
##  [73] "avg_yaw_dumbbell"         "stddev_yaw_dumbbell"     
##  [75] "var_yaw_dumbbell"         "kurtosis_roll_forearm"   
##  [77] "kurtosis_picth_forearm"   "kurtosis_yaw_forearm"    
##  [79] "skewness_roll_forearm"    "skewness_pitch_forearm"  
##  [81] "skewness_yaw_forearm"     "max_roll_forearm"        
##  [83] "max_picth_forearm"        "max_yaw_forearm"         
##  [85] "min_roll_forearm"         "min_pitch_forearm"       
##  [87] "min_yaw_forearm"          "amplitude_roll_forearm"  
##  [89] "amplitude_pitch_forearm"  "amplitude_yaw_forearm"   
##  [91] "var_accel_forearm"        "avg_roll_forearm"        
##  [93] "stddev_roll_forearm"      "var_roll_forearm"        
##  [95] "avg_pitch_forearm"        "stddev_pitch_forearm"    
##  [97] "var_pitch_forearm"        "avg_yaw_forearm"         
##  [99] "stddev_yaw_forearm"       "var_yaw_forearm"
`%ni%` <- Negate(`%in%`)
training <- subset(training,select = names(training) %ni% hasMissing)
training <- select(training, -(1:7))
training <- select(training, -c(classe))
Check for possible transformations: skewness, near zero variance
library(e1071)
## Warning: package 'e1071' was built under R version 3.1.3
skewValues <- apply(training, 2, skewness) # 1 indicates rows, 2 indicates columns
skewValues
##            roll_belt           pitch_belt             yaw_belt 
##           0.01743531          -1.06026968           0.92955750 
##     total_accel_belt         gyros_belt_x         gyros_belt_y 
##           0.06184027          -0.33357216          -0.18421051 
##         gyros_belt_z         accel_belt_x         accel_belt_y 
##           0.01534960           1.02993078           0.17677726 
##         accel_belt_z        magnet_belt_x        magnet_belt_y 
##          -0.01241748           1.43801993          -2.29318701 
##        magnet_belt_z             roll_arm            pitch_arm 
##          -0.58229318          -0.17320082           0.23450594 
##              yaw_arm      total_accel_arm          gyros_arm_x 
##          -0.09981091           0.08517438          -0.31529334 
##          gyros_arm_y          gyros_arm_z          accel_arm_x 
##           0.16437983          -0.24200227           0.41204860 
##          accel_arm_y          accel_arm_z         magnet_arm_x 
##           0.05947503          -0.91868886          -0.12179392 
##         magnet_arm_y         magnet_arm_z        roll_dumbbell 
##          -0.49033126          -1.15904612          -0.72745869 
##       pitch_dumbbell         yaw_dumbbell total_accel_dumbbell 
##           0.48889842           0.23324172           0.61449994 
##     gyros_dumbbell_x     gyros_dumbbell_y     gyros_dumbbell_z 
##           0.10010990           0.64001609          -0.33438393 
##     accel_dumbbell_x     accel_dumbbell_y     accel_dumbbell_z 
##          -0.45893918           0.37984514          -0.04265231 
##    magnet_dumbbell_x    magnet_dumbbell_y    magnet_dumbbell_z 
##           1.69487656          -1.73404515           0.91027441 
##         roll_forearm        pitch_forearm          yaw_forearm 
##          -0.45357395          -0.58087205          -0.28820998 
##  total_accel_forearm      gyros_forearm_x      gyros_forearm_y 
##          -0.53816015           0.19759798          -0.16446538 
##      gyros_forearm_z      accel_forearm_x      accel_forearm_y 
##           0.46525532          -0.23193507          -0.66011160 
##      accel_forearm_z     magnet_forearm_x     magnet_forearm_y 
##           0.45357481           0.62717299          -0.77501307 
##     magnet_forearm_z 
##          -1.21330861
nzv = nearZeroVar(training, saveMetrics = TRUE)
nzv
##                      freqRatio percentUnique zeroVar   nzv
## roll_belt             1.281690     20.326032   FALSE FALSE
## pitch_belt            1.050000     44.218034   FALSE FALSE
## yaw_belt              1.152174     34.335201   FALSE FALSE
## total_accel_belt      1.089109      1.324503   FALSE FALSE
## gyros_belt_x          1.161538      4.024452   FALSE FALSE
## gyros_belt_y          1.208437      2.088640   FALSE FALSE
## gyros_belt_z          1.036842      5.807438   FALSE FALSE
## accel_belt_x          1.116279      5.858380   FALSE FALSE
## accel_belt_y          1.250000      5.094244   FALSE FALSE
## accel_belt_z          1.193182     10.035660   FALSE FALSE
## magnet_belt_x         1.000000      9.577178   FALSE FALSE
## magnet_belt_y         1.045455      9.730005   FALSE FALSE
## magnet_belt_z         1.000000     13.601630   FALSE FALSE
## roll_arm             35.300000     51.248090   FALSE FALSE
## pitch_arm            44.125000     54.100866   FALSE FALSE
## yaw_arm              27.153846     54.763118   FALSE FALSE
## total_accel_arm       1.065217      3.209373   FALSE FALSE
## gyros_arm_x           1.034483     25.725930   FALSE FALSE
## gyros_arm_y           1.555556     14.009170   FALSE FALSE
## gyros_arm_z           1.232143      9.016811   FALSE FALSE
## accel_arm_x           1.047619     28.884361   FALSE FALSE
## accel_arm_y           1.083333     22.007132   FALSE FALSE
## accel_arm_z           1.000000     27.203260   FALSE FALSE
## magnet_arm_x          1.000000     43.555782   FALSE FALSE
## magnet_arm_y          1.076923     34.946510   FALSE FALSE
## magnet_arm_z          1.071429     39.989812   FALSE FALSE
## roll_dumbbell         1.058824     93.581253   FALSE FALSE
## pitch_dumbbell        1.888889     92.103923   FALSE FALSE
## yaw_dumbbell          1.058824     93.326541   FALSE FALSE
## total_accel_dumbbell  1.044444      2.088640   FALSE FALSE
## gyros_dumbbell_x      1.060606      7.997962   FALSE FALSE
## gyros_dumbbell_y      1.000000      9.984717   FALSE FALSE
## gyros_dumbbell_z      1.142857      6.367804   FALSE FALSE
## accel_dumbbell_x      1.250000     14.060112   FALSE FALSE
## accel_dumbbell_y      1.192308     18.186449   FALSE FALSE
## accel_dumbbell_z      1.280000     16.811004   FALSE FALSE
## magnet_dumbbell_x     1.550000     29.954152   FALSE FALSE
## magnet_dumbbell_y     1.100000     29.954152   FALSE FALSE
## magnet_dumbbell_z     1.000000     24.758023   FALSE FALSE
## roll_forearm         12.931034     31.686195   FALSE FALSE
## pitch_forearm        41.777778     48.446256   FALSE FALSE
## yaw_forearm          13.392857     33.672950   FALSE FALSE
## total_accel_forearm   1.042553      3.056546   FALSE FALSE
## gyros_forearm_x       1.222222     10.443199   FALSE FALSE
## gyros_forearm_y       1.325000     28.374936   FALSE FALSE
## gyros_forearm_z       1.120000     10.443199   FALSE FALSE
## accel_forearm_x       1.142857     32.042792   FALSE FALSE
## accel_forearm_y       1.250000     36.474783   FALSE FALSE
## accel_forearm_z       1.210526     21.192053   FALSE FALSE
## magnet_forearm_x      1.142857     44.625573   FALSE FALSE
## magnet_forearm_y      1.083333     49.872644   FALSE FALSE
## magnet_forearm_z      1.222222     46.255731   FALSE FALSE
administer a series of transformation
trans <- preProcess(training, method = c("BoxCox", "center", "scale", "pca" ))
trans
## 
## Call:
## preProcess.default(x = training, method = c("BoxCox", "center",
##  "scale", "pca"))
## 
## Created from 1963 samples and 52 variables
## Pre-processing: Box-Cox transformation, centered, scaled,
##  principal component signal extraction 
## 
## Lambda estimates for Box-Cox transformation:
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
##   0.200   0.275   0.600   0.850   1.175   2.000      48 
## 
## PCA needed 26 components to capture 95 percent of the variance
pcaObject <- prcomp(training, center = TRUE, scale. = TRUE)
apply the transformation
transformed <- predict(trans, training)
head(transformed[ , 1:5])
##         PC1       PC2       PC3        PC4      PC5
## 21 3.334486 -3.198428 -2.375489 -0.2706051 2.637420
## 27 3.263940 -3.149886 -2.287696 -0.1379626 2.498849
## 34 3.258007 -3.189714 -2.316096 -0.2102371 2.625699
## 35 3.283426 -3.158230 -2.378555 -0.2446043 2.566566
## 39 3.288098 -3.148316 -2.323429 -0.1790500 2.537294
## 42 3.310379 -3.177295 -2.354030 -0.2628376 2.546040
add class variable back to data
transformed$classe <- train$classe
RF with PCA (narrows down to 26 variables)
rfmodel = train(classe ~ . , data = transformed, method = "rf")
## Loading required package: randomForest
## Warning: package 'randomForest' was built under R version 3.1.3
## randomForest 4.6-10
## Type rfNews() to see new features/changes/bug fixes.
Check Accuracy: Acccuracy is 0.983 on full dataset. 0.8563 for partial training set(1963 obs)
rfpredict = predict(rfmodel$final, data = transformed)
rfaccuracy = confusionMatrix(rfpredict, transformed$classe)
rfaccuracy$overall[1]
##  Accuracy 
## 0.8650025
model on test data
Pre-processing and apply transformation on test set
testing <- test
`%ni%` <- Negate(`%in%`)
testing <- subset(testing,select = names(testing) %ni% hasMissing)
testing <- select(testing, -(1:7))
testing <- select(testing, -c(problem_id))

transformed_test <- predict(trans, testing) 
head(transformed_test[ , 1:5])
##         PC1       PC2        PC3         PC4        PC5
## 1 -1.739120  5.106669 -4.2596598  0.03393566 -1.4509517
## 2  4.063364 -2.814343 -3.3848120 -0.99431604  0.0508699
## 3  3.521066 -3.431463 -2.4467639 -0.43064107  0.5777526
## 4 -3.359487 -5.145818 -1.1760250  1.38448327 -0.8621558
## 5  3.533171  1.478366  1.4806231  3.56386617 -0.1597280
## 6  2.947065 -2.644367 -0.7574096 -0.90498281  0.5020992
rfpredict_testing = predict(rfmodel$final, newdata = transformed_test)
rfpredict_testing
##  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
##  B  A  A  A  A  E  D  B  A  A  B  C  B  A  E  E  A  B  B  B 
## Levels: A B C D E
